{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "missing-classes": {
            "description": "Specifies the behavior when the analyzer encounters a missing API class. \
                             If \"ignore\" is specified, the missing class is merely logged at WARNING level. \
                             If \"error\" is specified (which is the default) the analysis fails. \
                             If \"report\" is specified, the missing class is reported as a difference with a \
                             \"java.missing.oldClass\" or \"java.missing.newClass\" depending on whether the missing \
                             class was found in old or new archives. The severity of these differences is set to \
                             \"POTENTIALLY_BREAKING\". Additionally one can specify whether to report as missing \
                             classes that are only used to annotate other elements in the archives.",
            "type": "object",
            "properties": {
                "behavior": {
                    "type": "string",
                    "enum": [ "ignore", "error", "report" ],
                    "default": "error"
                },
                "ignoreMissingAnnotations": {
                    "type": "boolean",
                    "default": "false"
                }
            }
        },
        "reportUsesFor": {
            "description": "Specifies the list of difference codes for which the use sites should be specified in the \
                            output.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": ["java.missing.newClass", "java.missing.oldClass", "java.class.nonPublicPartOfAPI",
              "java.class.externalClassNoLongerExposedInAPI", "java.class.externalClassExposedInAPI"]
        },
        "deepUseChainAnalysis": {
            "description": "Whether to perform deep use chain analysis of classes when looking for public \
            API-reachable uses of non-public classes. This is off by default because it is very costly.",
            "type": "boolean",
            "default": "false"
        },
        "classpath": {
            "description": "Classpath related configuration.",
            "type": "object",
            "properties": {
                "bootstrap": {
                    "description": "Specifies the bootstrap classpath for the old and new versions of the API. Classes from \
                            this path are excluded from API comparison because they are assumed compatible.",
                    "type": "object",
                    "properties": {
                        "old": {
                            "$ref": "#/definitions/bootstrap-classpath"
                        },
                        "new": {
                            "$ref": "#/definitions/bootstrap-classpath"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bootstrap-classpath": {
            "description": "A list of jars relative to $JAVA_HOME/lib. If java home is not specified, the java home\
                            of the JVM executing the API check is used. If not specified, the following bootstrap jars\
                            are considered: resources.jar, rt.jar, sunrsasign.jar, jsse.jar, jce.jar, charsets.jar, \
                            jfr.jar",
            "type": "object",
            "properties": {
                "java-home": {
                    "description": "Optional absolute path to the Java home to be considered for this version of the \
                                    API.",
                    "type": "string"
                },
                "jars": {
                    "description": "The list of jars relative to $JAVA_HOME/jre/lib",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": ["resources.jar", "rt.jar", "sunrsasign.jar", "jsse.jar", "jce.jar", "charsets.jar",
                        "jfr.jar"]
                }
            }
        }
    }
}
