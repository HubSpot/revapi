{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "missing-classes": {
            "description": "Specifies the behavior when the analyzer encounters a missing API class. \
                             If \"ignore\" is specified, the missing class is merely logged at WARNING level. \
                             If \"error\" is specified the analysis fails. \
                             If \"report\" is specified, the missing class is reported as a difference with a \
                             \"java.missing.oldClass\" or \"java.missing.newClass\" depending on whether the missing \
                             class was found in old or new archives. The severity of these differences is set to \
                             \"POTENTIALLY_BREAKING\". Additionally one can specify whether to report as missing \
                             classes that are only used to annotate other elements in the archives.",
            "type": "object",
            "properties": {
                "behavior": {
                    "type": "string",
                    "enum": [ "ignore", "error", "report" ],
                    "default": "report"
                },
                "ignoreMissingAnnotations": {
                    "type": "boolean",
                    "default": "false"
                }
            }
        },
        "reportUsesFor": {
            "description": "Specifies the list of difference codes for which the use sites should be specified in the \
                            output.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": ["java.missing.newClass", "java.missing.oldClass", "java.class.nonPublicPartOfAPI",
              "java.class.externalClassNoLongerExposedInAPI", "java.class.externalClassExposedInAPI"]
        }
    }
}
